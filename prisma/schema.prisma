generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.0.x", "darwin"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model test {
  test_table String @id
}

model Account {
  id                 Int       @id @default(autoincrement())
  compoundId         String    @unique @map("compound_id")
  userId             Int       @map("user_id")
  providerType       String    @map("provider_type")
  providerId         String    @map("provider_id")
  providerAccountId  String    @map("provider_account_id")
  refreshToken       String?   @map("refresh_token")
  accessToken        String?   @map("access_token")
  accessTokenExpires DateTime? @map("access_token_expires")
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @default(now()) @map("updated_at")

  @@index([providerAccountId], name: "providerAccountId")
  @@index([providerId], name: "providerId")
  @@index([userId], name: "userId")
  @@map("accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  userId       Int      @map("user_id")
  expires      DateTime
  sessionToken String   @unique @map("session_token")
  accessToken  String   @unique @map("access_token")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @default(now()) @map("updated_at")

  @@map("sessions")
}

model User {
  id            Int       @id @default(autoincrement()) // PK
  name          String?
  email         String?   @unique
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  emailVerified DateTime? @map("email_verified")
  image         String?

  posts   Post[]   @relation("UserHasPosts") // FK
  profile Profile? @relation("UserHasProfile") // FK

  @@map("users")
}

model Profile {
  profileId      Int      @id @default(autoincrement())
  createdAt      DateTime @default(now()) @map("created_at")
  profilePicture String?
  bio            String?

  // One-to-one profile relationship
  user User? @relation("UserHasProfile", fields: [profileId], references: [id]) // PK

  // THINKING: Does the profile need to have posts? or should it be a hot potato where user is in the middle i.e.                profile ---- USER ---- posts


  // One-to-many post relationship
  posts Post[] @relation
}

model Post {
  postId    Int     @id @default(autoincrement())
  title     String
  content   String?
  published Boolean @default(false)

  // Many-to-One author relationship
  authorId Int?                         // local ref         // relationship ref
  author   User? @relation("UserHasPosts", fields: [authorId], references: [id]) // PK

  // Many-to-One profile relationship
  postProfileId Int? // local ref        // relationship ref
  profile       Profile? @relation(fields: [authorId], references: [profileId])

  // Many-To-Many relatinship
  // TODO > changed from many-to-many to one-to-many (post can have one category, category can be used on many posts)
  // TODO > review
  postCategoryId Int?
  category       Category? @relation("CategoryOnPost", fields: [postCategoryId], references: [categoryId])
}

// post can have many comments & user/author can have many comments
model Comment {
  commentId Int @id @default(autoincrement())

  @@map("comments")
}

// Post can have many categories
// Category can be used on many posts

// Post can have many categories
// One post has a list of many categories
// One category can be used on many posts
// Category can be used on many post
model Category {
  categoryId Int @id @default(autoincrement())

  // category String?
  category String?

  posts Post[] @relation("CategoryOnPost")

  @@map("categories")
}

model Synopsis {
  synopsisID Int @id @default(autoincrement())
  text String?
}

model BookReview {
  bookReviewID Int @id @default(autoincrement())
  bookTitle String
  reviewTitle String?
  reviewBody String?
  rating Int?
  recommended Boolean?
  author String?
}